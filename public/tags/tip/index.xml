<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tip on Codifice</title>
    <link>https://codifice.uk/tags/tip/</link>
    <description>Recent content in tip on Codifice</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 02 May 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codifice.uk/tags/tip/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Base26 Number Encoding/Generate Excel Columns</title>
      <link>https://codifice.uk/posts/2011-05-02-base26-number-encodinggenerate-excel/</link>
      <pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2011-05-02-base26-number-encodinggenerate-excel/</guid>
      <description>Ever needed to convert an Excel Column Letter to a number or vice versa?&amp;nbsp; Here’s a couple of extension methods to do it:
1: public static string ToLetterEncoded(this Int32 numberToEncode)  2: {  3: if (numberToEncode &amp;lt;= 0) throw new ArgumentOutOfRangeException(&#34;numberToEncode&#34;, numberToEncode, &#34;Value must be greater than zero&#34;);  4: numberToEncode--;  5: if (numberToEncode &amp;gt;= 0 &amp;amp;&amp;amp; numberToEncode &amp;lt; 26)  6: return ((char)(&#39;A&#39; + numberToEncode)).ToString();  7: else  8: return ToLetterEncoded(numberToEncode / 26) + ToLetterEncoded(numberToEncode % 26 + 1);  9: }   1: public static Int32 FromLetterEncodedInt32(this string letterEncodedNumber)  2: {  3: if (letterEncodedNumber.</description>
    </item>
    
    <item>
      <title>TIP: How to Handle Form Postbacks when Url Rewriting</title>
      <link>https://codifice.uk/posts/2010-07-15-tip-how-to-handle-form-postbacks-when/</link>
      <pubDate>Thu, 15 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-07-15-tip-how-to-handle-form-postbacks-when/</guid>
      <description>Url Rewriting is great and I love it a lot, you get to create nice readable (and memorable) urls without having to create hundred of files.&amp;nbsp; However, there can be issues.&amp;nbsp; For example, when you post back to a page where the url has been rewritten, it won’t be to the nice alias, it will be to the direct page.aspx?id=blah location.&amp;nbsp; Which is a bit nasty.
To stop this, I make use of a Control Adapters which alters the rendering logic of the HtmlForm control on every ASP.</description>
    </item>
    
    <item>
      <title>Convert Accented Characters to Simple Characters</title>
      <link>https://codifice.uk/posts/2010-06-28-convert-accented-characters-to-simple/</link>
      <pubDate>Mon, 28 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-06-28-convert-accented-characters-to-simple/</guid>
      <description>I recently needed a way to replace accented characters with simple english ones to allow more readable friendly urls. I&#39;m sure there are plenty of Danes out there who are sick of seeing their language butchered by UrlEncode.&amp;nbsp; After bit of reading up, it seems .Net 2.0 does 99% of the heavy lifting for you:
1: //using System.Text;  2:&amp;nbsp;   3: /// &amp;lt;summary&amp;gt;  4: /// Replaces Accented Characters with Closest Equivalents  5: /// &amp;lt;/summary&amp;gt;  6: /// &amp;lt;param name=&#34;</description>
    </item>
    
    <item>
      <title>TIP: How to Debug Windows Services and Plugins</title>
      <link>https://codifice.uk/posts/2010-06-23-tip-how-to-debug-windows-services-and/</link>
      <pubDate>Wed, 23 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-06-23-tip-how-to-debug-windows-services-and/</guid>
      <description>If you’ve ever had to create an component hosted inside a 3rd Party application (such as a plugin or windows service), you’ll know that it can be pretty tricky to get the debugger attached to the process quickly and reliably.&amp;nbsp; Here’s a snippet that’s I’ve taken from project to project:
1: #if DEBUG  2: if (Properties.Settings.Default.LaunchDebugger  3: &amp;amp;&amp;amp; !System.Diagnostics.Debugger.IsAttached) System.Diagnostics.Debugger.Launch();  4: #endif   
This is statement checks to see if launching the debugger is allowed (using the standard settings classes) and launches the debugger if one isn’t already attached.</description>
    </item>
    
    <item>
      <title>Tip: Constructing Private Types</title>
      <link>https://codifice.uk/posts/2010-06-16-tip-constructing-private-types/</link>
      <pubDate>Wed, 16 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-06-16-tip-constructing-private-types/</guid>
      <description>I recently needed to create an instance of the System.Web.StaticFileHandler.&amp;nbsp; This is a bit difficult as the class is internal so reflection must be used:
1: private static IHttpHandler _staticFileHandler;  2:&amp;nbsp;   3: private static IHttpHandler StaticFileHandler  4: {  5: get  6: {  7: if (_staticFileHandler == null)  8: {  9: Assembly systemWeb = typeof(IHttpHandler).Assembly;  10: /* If you don&#39;t have a public type to reference a lookup like this could be done  11: Assembly systemWeb = AppDomain.</description>
    </item>
    
  </channel>
</rss>