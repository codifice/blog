<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ado.net on Codifice</title>
    <link>https://codifice.uk/tags/ado.net/</link>
    <description>Recent content in ado.net on Codifice</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Jul 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codifice.uk/tags/ado.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Experiments with ADO.Net, Extension Methods and Anonymous Methods</title>
      <link>https://codifice.uk/posts/2011-07-14-experiments-with-adonet-extension/</link>
      <pubDate>Thu, 14 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2011-07-14-experiments-with-adonet-extension/</guid>
      <description>As much as at pains me to admit it, an ORM Framework is not the answer to all data access problems.&amp;nbsp; Sometimes the quickest, easiest and most maintainable approach is back-to-basics flat ADO.Net.&amp;nbsp; For those developers whose (development) life began with Entity Framework, NHibernate or SubSonic.&amp;nbsp; This is a fairly typical example of an ADO.Net method (in a well structured code base):
1: private static IEnumerable&amp;lt;ContentAwaitingApproval&amp;gt; GetPendingApprovals(long approvalGroupId)  2: {  3: List&amp;lt;ContentAwaitingApproval&amp;gt; approvals = new List&amp;lt;ContentAwaitingApproval&amp;gt;();  4: using (SqlConnection conn = new SqlConnection(ConfigurationManager.</description>
    </item>
    
  </channel>
</rss>