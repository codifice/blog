<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>usability on Codifice</title>
    <link>https://codifice.uk/tags/usability/</link>
    <description>Recent content in usability on Codifice</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 20 Jul 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codifice.uk/tags/usability/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Changing A Master Page Body Tag’s CSS Class For Different Content Pages</title>
      <link>https://codifice.uk/posts/2010-07-20-changing-master-page-body-tags-css/</link>
      <pubDate>Tue, 20 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-07-20-changing-master-page-body-tags-css/</guid>
      <description>It seems a bit of a failing of Master Pages that there’s no clear way to assign different CSS classes to the ‘body’ tag based on the Content Page.&amp;nbsp; To get around this, I’ve taken to inheriting all of my content pages from a known base class (which in turn inherits from System.Web.Page) and then giving it a publically accessible property of ‘BodyCssClass’!
1: namespace MartinOnDotNet.MasterPageBodyClass  2: {  3: public class BasePage : System.</description>
    </item>
    
    <item>
      <title>TIP: How to Handle Form Postbacks when Url Rewriting</title>
      <link>https://codifice.uk/posts/2010-07-15-tip-how-to-handle-form-postbacks-when/</link>
      <pubDate>Thu, 15 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-07-15-tip-how-to-handle-form-postbacks-when/</guid>
      <description>Url Rewriting is great and I love it a lot, you get to create nice readable (and memorable) urls without having to create hundred of files.&amp;nbsp; However, there can be issues.&amp;nbsp; For example, when you post back to a page where the url has been rewritten, it won’t be to the nice alias, it will be to the direct page.aspx?id=blah location.&amp;nbsp; Which is a bit nasty.
To stop this, I make use of a Control Adapters which alters the rendering logic of the HtmlForm control on every ASP.</description>
    </item>
    
    <item>
      <title>TIP: Improve Readability with Shorter String.Format Statements</title>
      <link>https://codifice.uk/posts/2010-07-01-tip-improve-readability-with-shorter/</link>
      <pubDate>Thu, 01 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-07-01-tip-improve-readability-with-shorter/</guid>
      <description>String.Format is a wonderful method, a real life saver when it comes to producing (readable) formatted text from within code.&amp;nbsp; I use it everywhere, but it gets a bit tedious typing the same boilerplate code to use it properly:
1: string formatted = string.Format(CultureInfo.InvariantCulture, &#34;Formatted text {0:-15} example generated on {1:d}&#34;, meaningfulString, DateTime.Now);   

That “string.Format(CultureInfo.InvariantCulture,” over 40 characters before you get the meat of the statement.&amp;nbsp; Sure you can drop the invariant culture bit but then you can introduce weird formatting problems on different machines….</description>
    </item>
    
    <item>
      <title>Convert Accented Characters to Simple Characters</title>
      <link>https://codifice.uk/posts/2010-06-28-convert-accented-characters-to-simple/</link>
      <pubDate>Mon, 28 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-06-28-convert-accented-characters-to-simple/</guid>
      <description>I recently needed a way to replace accented characters with simple english ones to allow more readable friendly urls. I&#39;m sure there are plenty of Danes out there who are sick of seeing their language butchered by UrlEncode.&amp;nbsp; After bit of reading up, it seems .Net 2.0 does 99% of the heavy lifting for you:
1: //using System.Text;  2:&amp;nbsp;   3: /// &amp;lt;summary&amp;gt;  4: /// Replaces Accented Characters with Closest Equivalents  5: /// &amp;lt;/summary&amp;gt;  6: /// &amp;lt;param name=&#34;</description>
    </item>
    
    <item>
      <title>Blogger Tweak:  Making Code Snippets More Usable</title>
      <link>https://codifice.uk/posts/2010-06-10-blogger-tweak-making-code-snippets-more/</link>
      <pubDate>Thu, 10 Jun 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-06-10-blogger-tweak-making-code-snippets-more/</guid>
      <description>Now that I’m blogging more code snippet heavy content it’s becoming apparent that the excellent Code Snippet Plugin with Windows Live Writer isn’t the most usable for people trying to copy the snippet for their own use.&amp;nbsp; So I’ve created a Blogger Template tweak to automatically add a ‘plain text/formatted’ toggle.&amp;nbsp; To install simply copy the snippet below into your Blogger Template just above the &amp;lt;/body&amp;gt; tag.
1: &amp;lt;script type=&#39;text/javascript&#39;&amp;gt;  2: var ChildText = function(nodeList) {  3: var text = &amp;amp;#39;&amp;amp;#39;;  4: for (var j = nodeList.</description>
    </item>
    
  </channel>
</rss>