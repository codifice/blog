<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>best practise on Codifice</title>
    <link>https://codifice.uk/tags/best-practise/</link>
    <description>Recent content in best practise on Codifice</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 03 May 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codifice.uk/tags/best-practise/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Logging is the new Exception Swallowing</title>
      <link>https://codifice.uk/posts/2011-05-03-logging-is-new-exception-swallowing/</link>
      <pubDate>Tue, 03 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2011-05-03-logging-is-new-exception-swallowing/</guid>
      <description>For a long time now I’ve been stamping down hard on empty catch blocks in code, for obvious reasons.&amp;nbsp; When I can dictate coding standards that’s pretty much top the list.&amp;nbsp;   Every ‘catch’ block must (at a minimum) log or throw   I now realise I made a mistake with this rule...it should be:
  Every ‘catch’ block must (at a minimum) throw or log   It’s a subtle (the wording – not the formatting) difference in the way we need to think about this rule but it’s one I think we don’t think about enough.</description>
    </item>
    
    <item>
      <title>HowTo: Creating Strongly Typed Code Using Microsoft.VisualBasic.Collection</title>
      <link>https://codifice.uk/posts/2010-08-18-howto-creating-strongly-typed-code/</link>
      <pubDate>Wed, 18 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-08-18-howto-creating-strongly-typed-code/</guid>
      <description>One of the 3rd Party CMS’s that I frequently work with (Ektron) has a lot of legacy API code that uses Microsoft.VisualBasic.Collections ( from hereon referred to as Collection) to pass data into the database.&amp;nbsp; These API’s methods are slowly being replaced with strongly typed entity style methods, but the most stable and reliable methods use Collections.
There are many reasons to dislike Collections, but my top ones are:
 You can’t see the key’s of the values inside – this often leads to Exception led logic  Weakly Typed   What’s in the Box?</description>
    </item>
    
    <item>
      <title>Ektron: Safely Impersonating Users within Ektron</title>
      <link>https://codifice.uk/posts/2010-07-21-ektron-safely-impersonating-users/</link>
      <pubDate>Wed, 21 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-07-21-ektron-safely-impersonating-users/</guid>
      <description>I recently hit an scenario where I needed to impersonate a lesser privileged workarea user to perform some content creation/approvals whilst working within the Approval Chain. My initial attempts leveraged my ElevatedPermissionScope class, which failed with an error similar to:
1: System.Exception: Index was outside the bounds of the   2: array.[EkSite--&amp;gt;;GetPermissions(Int,Int,Int,String,[&amp;amp;Collection)]][EkSite-&amp;gt;GetPermissions(Int,Int,String,[&amp;amp;Collection]]  3: at   4: Ektron.Cms.EkException.ThrowException(Exception ex, EventLogEntryType EventType)  5: at   6: Ektron.Cms.EkException.ThrowException(Exception ex)  7: at   8: Ektron.</description>
    </item>
    
    <item>
      <title>Elevating Ektron User Permissions Safely</title>
      <link>https://codifice.uk/posts/2010-04-19-elevating-ektron-user-permissions/</link>
      <pubDate>Mon, 19 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-19-elevating-ektron-user-permissions/</guid>
      <description>When you’re coding against the Ektron API you frequently find yourself needing to add/modify content as a result of a user action or similar privileged tasks.&amp;nbsp; To do this you need to impersonate a more privileged user (such as&amp;nbsp; InternalAdmin) for the duration of the task and then revert to the current users privileges. The approach most frequently quoted on the Ektron dev forums is along the lines of:
1: public void DoElevatedPermission()  2: {  3: int currentCallerId;  4: int currentUserId;  5:&amp;nbsp;   6: Ektron.</description>
    </item>
    
    <item>
      <title>My Windows 7 Development VM Load Out</title>
      <link>https://codifice.uk/posts/2010-04-10-my-windows-7-development-vm-load-out/</link>
      <pubDate>Sat, 10 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-10-my-windows-7-development-vm-load-out/</guid>
      <description>Well, it was bound to happen.&amp;nbsp; I rebuilt my PC and forgot to install my dev tools… oh well.&amp;nbsp; In an attempt to stop this from ever happening again, I’m creating a dev VM which will be backed up onto my NAS device.
The applications I’m installing for (ASP.Net Development) are:
 VMWare Player 3.0.1 (FileHippo)  2GB Memory  1 Processor  Bridged Network  40GB C: (System and Applications)  60GB D: (Data)    Windows 7 Professional x64  Firefox with Extensions:  Firebug  YSlow  Web Developer Toolbar  HTML Validator  Selenium IDE    Microsoft Web Platform Installer  Web Platform  Web Server – Recommended Products + SEO Toolkit  Framework – Recommended Products + ASP.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 3)</title>
      <link>https://codifice.uk/posts/2010-04-08-secure-your-website-put-bouncers-at_08/</link>
      <pubDate>Thu, 08 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-08-secure-your-website-put-bouncers-at_08/</guid>
      <description>In part 1, I gave an overview of the similarities in securing a good night club and a website and in part 2 I gave an overview of what we, as developers, can do to secure our websites.&amp;nbsp; In this final part, I give details on how we should be doing the most important (and mundane) part of securing our websites:
 1. Input Validation (Continued) One important fact that many web developers fail to take on board, is that everything you receive from the client is a string; Query strings, post back values and cookies.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 2)</title>
      <link>https://codifice.uk/posts/2010-04-06-secure-your-website-put-bouncers-at_06/</link>
      <pubDate>Tue, 06 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-06-secure-your-website-put-bouncers-at_06/</guid>
      <description>In part 1, I gave an overview of the similarities in securing a good night club and a website.&amp;nbsp;&amp;nbsp; In this part I’ll give an overview of what we as developers can do to implement these measures:
 4 and 5 Authentication and HTTPS The implementation of these is very much driven by the business requirements of the site, if the site’s free to access and there’s no personal information they’re a non-issue.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 1)</title>
      <link>https://codifice.uk/posts/2010-04-04-secure-your-website-put-bouncers-at/</link>
      <pubDate>Sun, 04 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-04-secure-your-website-put-bouncers-at/</guid>
      <description>A good website is much like a nightclub, we want the general population to be able to use the facilities freely (or for a nominal fee!) but we don’t want the trouble makers that will spoil it for everyone.&amp;nbsp;&amp;nbsp; Pushing the analogy further, nightclubs have a few different types of security in place:
  Visibility Implementation Mitigates   High Profile Bouncers  Filter out trouble makers at point of entry    &amp;nbsp; Internal Security Eject people that become troublemakers   Low Profile Bars on Windows Alarmed Exits Prevent people sneaking in   &amp;nbsp; Metal Detectors Security Cameras Passively check for people about to cause trouble   As web developers we have a very similar set of tools that we can use to secure our website:</description>
    </item>
    
    <item>
      <title>Ektron and Web Application Projects (Part 3)</title>
      <link>https://codifice.uk/posts/2010-03-27-ektron-compiled-workarea-workaround/</link>
      <pubDate>Sat, 27 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-03-27-ektron-compiled-workarea-workaround/</guid>
      <description>In this series of posts I’ve described a method of keeping your code and the required Ektron workarea separated.&amp;nbsp; This method essentially turns the ‘drop-in compiled workarea’ feature request on it’s head, by dropping your compiled code into the work area.&amp;nbsp; It’s the same result, just a slightly difference process (that you can do right now!):
 In Part 1, I discussed why you might want to develop your website outside of the default Ektron workarea and gave a brief overview of your options.</description>
    </item>
    
    <item>
      <title>ASP.Net and Custom Error Pages, an SEO nightmare?</title>
      <link>https://codifice.uk/posts/2010-03-20-aspnet-and-custom-error-pages-seo/</link>
      <pubDate>Sat, 20 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-03-20-aspnet-and-custom-error-pages-seo/</guid>
      <description>It’s a (conscientious) developer’s worst fear:
 You’ve slaved long and hard to produce a top-notch, blistering fast website that fully shows off your coding prowess and skills, you unveil the website to critical acclaim and universal client approval (imagine the cheering crowds) but then out-of-hours the database server fails!&amp;nbsp; Yerrk!
All the developer’s are out celebrating a successful so no-one notices the log file growing bigger and bigger, screaming to be heard….</description>
    </item>
    
    <item>
      <title>Mmmmm… clean, sweet WCF proxy usage with TidyProxy!</title>
      <link>https://codifice.uk/posts/2010-03-20-mmmmm-clean-sweet-wcf-proxy-usage/</link>
      <pubDate>Sat, 20 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-03-20-mmmmm-clean-sweet-wcf-proxy-usage/</guid>
      <description>Everyone knows (hopefully) how WCF has made multi-tiered application development easier and cleaner.&amp;nbsp; You get nicely generated client proxies that reuse common libraries straight out of Visual Studio – no more having to convert between your DTOs and the Web Service DTOs.&amp;nbsp; They even implement IDisposable - you can just wrap them in using statements and you’re good to go!&amp;nbsp; How neat is that!
1: using (var proxy = new TidyProxy&amp;lt;SomeWCFServiceClient&amp;gt;()) 2: { 3: proxy.</description>
    </item>
    
  </channel>
</rss>