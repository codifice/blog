<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>performance on Codifice</title>
    <link>https://codifice.uk/tags/performance/</link>
    <description>Recent content in performance on Codifice</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 Dec 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codifice.uk/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ektron: High Indexing Service Processor Usage (Potential) Fix</title>
      <link>https://codifice.uk/posts/2010-12-16-ektron-high-indexing-service-processor/</link>
      <pubDate>Thu, 16 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-12-16-ektron-high-indexing-service-processor/</guid>
      <description>One of our larger client Ektron sites has had a history of poor performance that always seemed to be related to Indexing immediately after publishing content or syncing content to the live environment.&amp;nbsp; The site heavily uses indexed smart form fields and indexed metadata fields for ordering/sorting lists of content.
The symptoms were:
 High CIDAEMON processor usage (95-100% of a processor core)  Total Documents to Index in Indexing Service Manager getting stuck  Indexing Service ‘Service Too Busy’ exceptions  Analysing Crash Dumps of the CIDAEMON process shows the ‘hot’ thread stuck in the QLXFilter.</description>
    </item>
    
    <item>
      <title>Performance: Applying Output Cache Policies to a User Controls</title>
      <link>https://codifice.uk/posts/2010-11-03-performance-applying-output-cache/</link>
      <pubDate>Wed, 03 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-11-03-performance-applying-output-cache/</guid>
      <description>One of the great features in ASP.NET is the rich caching framework.&amp;nbsp; I particularly like being able to:
 Define caching policies in the configuration file and then assigning those policies to groups of pages (via the @@OutputCache directive).  Cache User Control output for reuse on multiple pages (Partial Page Caching)   What I don’t like is the fact that you can’t combine the two!&amp;nbsp; You have to hard code your user control cache directives either in the mark-up (as @@OutputCache directive) or by applying an attribute (System.</description>
    </item>
    
    <item>
      <title>SQL: Cleaning Up After the Database Tuning Engine Advisor</title>
      <link>https://codifice.uk/posts/2010-11-01-sql-cleaning-up-after-database-tuning/</link>
      <pubDate>Mon, 01 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-11-01-sql-cleaning-up-after-database-tuning/</guid>
      <description>I’ve recently had to do a quick bit of DB performance analysis work on a 3rd Party database to see if I can improve performance(without being too invasive).&amp;nbsp; The quickest way to do this, is using the Database Tuning Engine Advisor tool that comes with SQL 2008 (the best way is to have loads of experience and a tonne of time to properly analyse the database). Part of my analysis procedure was to make a script of queries that I could run with and without the DTA recommended indexes to evaluate any real world improvement.</description>
    </item>
    
    <item>
      <title>Enabling Concurrent Logins in Ektron</title>
      <link>https://codifice.uk/posts/2010-04-16-enabling-concurrent-logins-in-ektron/</link>
      <pubDate>Fri, 16 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-16-enabling-concurrent-logins-in-ektron/</guid>
      <description>For one of our major clients we needed a semi-secure area – you needed credentials to view the content within, but there was only one set of credentials.&amp;nbsp;&amp;nbsp; This meant that multiple users could access the site concurrently with the same credentials and this is a bit of a problem for the Ektron security model as it’s based around a one session per login model.
This model is enforced by a unique integer that is generated on login and persisted in the database (in [dbo].</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 3)</title>
      <link>https://codifice.uk/posts/2010-04-08-secure-your-website-put-bouncers-at_08/</link>
      <pubDate>Thu, 08 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-08-secure-your-website-put-bouncers-at_08/</guid>
      <description>In part 1, I gave an overview of the similarities in securing a good night club and a website and in part 2 I gave an overview of what we, as developers, can do to secure our websites.&amp;nbsp; In this final part, I give details on how we should be doing the most important (and mundane) part of securing our websites:
 1. Input Validation (Continued) One important fact that many web developers fail to take on board, is that everything you receive from the client is a string; Query strings, post back values and cookies.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 2)</title>
      <link>https://codifice.uk/posts/2010-04-06-secure-your-website-put-bouncers-at_06/</link>
      <pubDate>Tue, 06 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-06-secure-your-website-put-bouncers-at_06/</guid>
      <description>In part 1, I gave an overview of the similarities in securing a good night club and a website.&amp;nbsp;&amp;nbsp; In this part I’ll give an overview of what we as developers can do to implement these measures:
 4 and 5 Authentication and HTTPS The implementation of these is very much driven by the business requirements of the site, if the site’s free to access and there’s no personal information they’re a non-issue.</description>
    </item>
    
  </channel>
</rss>