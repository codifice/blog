<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Codifice</title>
    <link>https://codifice.uk/tags/security/</link>
    <description>Recent content in security on Codifice</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Sep 2010 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codifice.uk/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Security: Protect against POET Attacks with Custom Errors!</title>
      <link>https://codifice.uk/posts/2010-09-20-security-protect-against-poet-attacks/</link>
      <pubDate>Mon, 20 Sep 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-09-20-security-protect-against-poet-attacks/</guid>
      <description>There’s been a big deal made of a serious security flaw in ASP.Net which potentially affects a lot of .Net sites, that allows a 3rd Party to trick ASP.Net into serving sensitive files within a web application folder.&amp;nbsp; Microsoft have released official advise on how to temporarily patch the problem which revolves around forcing Error&amp;nbsp; and Page Not found pages to return the same status page.&amp;nbsp; This would need to stay in place until a permanent fix is released.</description>
    </item>
    
    <item>
      <title>Ektron: Safely Impersonating Users within Ektron</title>
      <link>https://codifice.uk/posts/2010-07-21-ektron-safely-impersonating-users/</link>
      <pubDate>Wed, 21 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-07-21-ektron-safely-impersonating-users/</guid>
      <description>I recently hit an scenario where I needed to impersonate a lesser privileged workarea user to perform some content creation/approvals whilst working within the Approval Chain. My initial attempts leveraged my ElevatedPermissionScope class, which failed with an error similar to:
1: System.Exception: Index was outside the bounds of the   2: array.[EkSite--&amp;gt;;GetPermissions(Int,Int,Int,String,[&amp;amp;Collection)]][EkSite-&amp;gt;GetPermissions(Int,Int,String,[&amp;amp;Collection]]  3: at   4: Ektron.Cms.EkException.ThrowException(Exception ex, EventLogEntryType EventType)  5: at   6: Ektron.Cms.EkException.ThrowException(Exception ex)  7: at   8: Ektron.</description>
    </item>
    
    <item>
      <title>Elevating Ektron User Permissions Safely</title>
      <link>https://codifice.uk/posts/2010-04-19-elevating-ektron-user-permissions/</link>
      <pubDate>Mon, 19 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-19-elevating-ektron-user-permissions/</guid>
      <description>When you’re coding against the Ektron API you frequently find yourself needing to add/modify content as a result of a user action or similar privileged tasks.&amp;nbsp; To do this you need to impersonate a more privileged user (such as&amp;nbsp; InternalAdmin) for the duration of the task and then revert to the current users privileges. The approach most frequently quoted on the Ektron dev forums is along the lines of:
1: public void DoElevatedPermission()  2: {  3: int currentCallerId;  4: int currentUserId;  5:&amp;nbsp;   6: Ektron.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 3)</title>
      <link>https://codifice.uk/posts/2010-04-08-secure-your-website-put-bouncers-at_08/</link>
      <pubDate>Thu, 08 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-08-secure-your-website-put-bouncers-at_08/</guid>
      <description>In part 1, I gave an overview of the similarities in securing a good night club and a website and in part 2 I gave an overview of what we, as developers, can do to secure our websites.&amp;nbsp; In this final part, I give details on how we should be doing the most important (and mundane) part of securing our websites:
 1. Input Validation (Continued) One important fact that many web developers fail to take on board, is that everything you receive from the client is a string; Query strings, post back values and cookies.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 2)</title>
      <link>https://codifice.uk/posts/2010-04-06-secure-your-website-put-bouncers-at_06/</link>
      <pubDate>Tue, 06 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-06-secure-your-website-put-bouncers-at_06/</guid>
      <description>In part 1, I gave an overview of the similarities in securing a good night club and a website.&amp;nbsp;&amp;nbsp; In this part I’ll give an overview of what we as developers can do to implement these measures:
 4 and 5 Authentication and HTTPS The implementation of these is very much driven by the business requirements of the site, if the site’s free to access and there’s no personal information they’re a non-issue.</description>
    </item>
    
    <item>
      <title>Secure Your Website, Put Bouncers at the Door (Part 1)</title>
      <link>https://codifice.uk/posts/2010-04-04-secure-your-website-put-bouncers-at/</link>
      <pubDate>Sun, 04 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-04-04-secure-your-website-put-bouncers-at/</guid>
      <description>A good website is much like a nightclub, we want the general population to be able to use the facilities freely (or for a nominal fee!) but we don’t want the trouble makers that will spoil it for everyone.&amp;nbsp;&amp;nbsp; Pushing the analogy further, nightclubs have a few different types of security in place:
  Visibility Implementation Mitigates   High Profile Bouncers  Filter out trouble makers at point of entry    &amp;nbsp; Internal Security Eject people that become troublemakers   Low Profile Bars on Windows Alarmed Exits Prevent people sneaking in   &amp;nbsp; Metal Detectors Security Cameras Passively check for people about to cause trouble   As web developers we have a very similar set of tools that we can use to secure our website:</description>
    </item>
    
    <item>
      <title>Ektron and Web Application Projects (Part 1)</title>
      <link>https://codifice.uk/posts/2010-03-22-working-with-ektron-using-web/</link>
      <pubDate>Mon, 22 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://codifice.uk/posts/2010-03-22-working-with-ektron-using-web/</guid>
      <description>Like a lot of enterprise CMS production Ektron expects you to work in a particular way and provides lots of help for non-developers to quickly produce websites with minimal technical skills.&amp;nbsp; But what if you have more technical needs?
One of the downsides (in my opinion) of developing websites against Ektron, is the expectation that you will be integrating your code into the existing workarea Web Site Project.&amp;nbsp; Now, there are pros and cons on Web Site over Web Application projects but the big disadvantage for me is the sheer size of the workarea brings Visual Studio to a crawl when your editing code.</description>
    </item>
    
  </channel>
</rss>